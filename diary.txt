April 1, 2018
Got back to work.  Took more than an hour, even with code in Clojure, to 
figure out where I left off and where to go next.  I feel like I've got
myself reoriented and can pick up.  Next: exponents! 

April 11, 2018
Don't care about having Pequod conform to functional principles at the moment. 
I need to build my understanding of the model first.  I can always refactor
later, and I definitely will.  But I need to wrap my head around the code.

April 14, 2018
Took my birthday off, and Friday off because it's Friday.  But back to work on
Saturday: Conversion is continuing well.  Nearly done with the big setup function
conversion.  Got a couple more things to wrap up.  Hoping to have most of the 
main undergirding done soon.  Then got to figure out ways to interact with it
in a clean interface.  Maybe I'll steal an idea from ants.clj?

April 21, 2018
It's coming easier now.  Continuing with building helper functions and moving along with lorenz-and-gini updates.  I feel like I'm making steady progress.

May 13, 2018
With the UDC Conference done, I'm back to work on this.  Got a paper notebook to help
with grokking.  It might be a blessing that I've been away from activism for a while.
It helps me to see things with new eyes.  I can understand that we need to be involved
in the day-to-day, especially with such immediate suffering, but no thought it brought
to vision or how to instantiate it.  That can help reduce the suffering, in spades.  Enough
writing.  Back to work.

May 20, 2018
Good day.  Got through the lorenz-and-gini function.  I even made a commit.  I'm moving 
on to the go function, and particularly to the proposal function, and further still to
solution1.nls.  Hoo boy.  This looks complicated.  I might want to ask for help, but not
before I give it a try first.

May 28, 2018
Spoke with Michael over the phone.  Good call.  Here are the notes from the call.

Lagrangian multiplier method (optimizing a function, finding a max or min; NOT a numerical method)
ef -> effort component, treated differently
Effort constraint: S
Past debate: Use numeric methods?
Future direction: Use analytical methods?
Why does it blow up when there are an odd number of terms?
Search term: Constrained optimization problem
Clojure core.logic

June 4, 2018
Notes from call with Robin and Michael:
1.  It doesn't work.
2.  It takes a long time.
pledge not fail at retirement
July 1st: Return.  Be ready! 
S: How much do you dislike effort
k: Diminishing return to more effort
value of their product (price of product * quantity) - (price of inputs * inputs) - Se^k [effort terms]

June 10, 2018
Excellent progress in converting all the under-the-hood functions into Clojure.  I feel like I understand
all the pieces and how they fit together.  I have the pieces; now it's a matter of getting them to fit
together.  I'll email Michael (cc: Robin) tomorrow and work on that next!

June 23, 2018
Getting closer.  Got expresso loaded and working with equations.  So far so good.  Am confused with
the notation of the Solve[] command.  Will write to Michael to clarify. 

June 28, 2018
After emailing Michael with a reminder, I finally got the answer needed.  The notation I was confused
by was a mistake.  It's now clear.  Back to work.

July 9, 2018
No response from Michael in days; ditto Robin.  Admittedly, it's the summer.  But at the same time
the notes from Michael regarding research into computing through the equations has not been great.
No matter; am trying another approach.  I found a library called symja that looks like it could be 
useful.  Am seeing if it can (1) compute the equations as Mathematica did, and (2) can it be ported
into Clojure (it's written in Java, so there's a prayer's chance it can).  Continuing...

July 15, 2018
On Friday morning I got an idea: Use Wolfram as an API, have it compute the equations, then deliver the results
back as a web call to -- whatever, the Clojure code, the Wolfram code, the Netlogo code, what have you.
I spoke with Robin over the phone about the idea; he was OK with giving it a try and discussing next week.
Yesterday, I spent the evening working out the details after a whole lot of trial and error.  After 
maybe 40 builds, I finally got the output I wanted.  And today, after watching the FIFA men's World Cup
final, I got it to a working API.  Here it is: 

http://www.wolframcloud.com/objects/0f665c3f-4fe9-4ddb-8713-6f9947270a12?n=1

Change the n=1 value to some other number and it'll recompute.  I should test this out to confirm that
this scales.  Next thoughts: Memoize and write a function to convert this to Clojure.

July 24, 2018
Better version:

https://www.wolframcloud.com/objects/6418ed29-be1b-4552-b600-ca5f13689f43?n=3

Much more compact, easier to parse.

October 5, 2018

Okay.  I'm giving myself a deadline of getting this app done in working form in 3 months.  I'm tired of
letting this linger like an albatross over my head.  And to make _sure_ this gets done, I'm locking
myself into a presentation to give in January -- I _have_ to get this done, so that I have the presentation
done.

October 17, 2018
I came upon a great brainstorm this past weekend: Rewrite the Clojure app as a _Clojurescript_ app.  I could
use Figwheel, I could get instant feedback, I could store all the data as one big _atom_ (probably a map).
I resolved to do that, and on Monday I finally did: I created a new figwheel project (with tests!) and 
got it working!  For the past three days, I've been coding away on it happily, making excellent progress, and
even better leveraging the _Clojure code I already wrote_ into this Clojurescript app.  Better still, once
I'm done (to some extent) I can export it to an HTML file and post it on my website to share with Robin
and Michael.  Hot damn!  Life is good (at least as far as this project is concerned). 

March 24, 2019
On or around February 20, 2019, I read something somewhere online.  I think it was Daily Kos, but I 
couldn't find the quote when I tried to search for it.  The quote I read said words to the effect: "We
have 12 years to get in shape before global warming becomes unstoppable.  Everyone has to do something
each day to address this.  What are you doing today about it?"

This really struck a chord with me.  I like to think I'm living kind of a sparse life; I've been vegan
for a quarter-century.  I don't own a car.  I shut the lights off when I'm not using them.  Even so,
I feel like I need to "up" my game.  So, I decided to focus on pequod.  It's paying off.  In the month
or so since reading that, I've nearly tripled the number of commits of code.  

Number of commits in the first 4 months of pequod-cljs before February 20, 2019: 16
Number of commits in the month-plus of pequod-cljs since February 20, 2019, so far: 44

Here's the list of commits for good measure.

a00c8b7 - (HEAD -> master, origin/master) Got last of tests (first round) written and green. (9 hours ago)
ea24803 - Yet more tests! (10 hours ago)
d40a985 - More tests. (13 hours ago)
bd5f96a - First working tests. (13 hours ago)
88700b5 - Got infrastructure working for automated doo tests. (15 hours ago)
43a4fef - Adding package-lock.json for Doo tests. (16 hours ago)
0c9c343 - Improve flexibility of presentation, use. (33 hours ago)
3e22777 - Got part 5 working as intended. (3 days ago)
fe0bf73 - Coded up Part 5; now to get it to work as intended! (3 days ago)
1b319e6 - Beginning five-part stitch: button for threshold, et al. (4 days ago)
fe0048f - WIP: check-surpluses (6 days ago)
abd6617 - Part 5: Got lorenz-and-gini tuple code fixed! (6 days ago)
0a3b1db - Got other-price-change coded and confirmed! (7 days ago)
35d07ad - Got demand-list fixed! (7 days ago)
ba8a843 - Got demand list, I think. (11 days ago)
5f04160 - Got get-supply-list function drafted. (2 weeks ago)
fb90704 - Cleanup, and starting work on price-change (2 weeks ago)
d34fa1b - confirmed nature and labor prices and surpluses match! (2 weeks ago)
39e36d1 - Got intermediate surpluses (and prices?) fixed! (2 weeks ago)
170fefe - Assorted refinements to update-surpluses-prices (2 weeks ago)
2147bfc - Fixed final-prices in update-prices-surpluses (2 weeks ago)
475c9f6 - Fixed surpluses in update-surpluses-prices (2 weeks ago)
c48774e - Fixed bug with :a/:s consistency; got wcs/ccs working. (2 weeks ago)
1f18815 - Got second button, ex001 fed in! (2 weeks ago)
ff2df99 - Got data exported to a digestible format. (3 weeks ago)
ed8ce8a - More data wrangling: Got string conversion to Clojure working. (3 weeks ago)
e97e63d - Cheatsheet: read-string (3 weeks ago)
c84756b - Data munging, part one. (3 weeks ago)
ac3a332 - Process to load data from CSV from Netlogo. (3 weeks ago)
f7a0b4e - Updating deltas' calculation. (3 weeks ago)
51b0fe1 - Don't forget the notes! (3 weeks ago)
4dee53f - WIP Got update-surpluses-prices working, kind of. (3 weeks ago)
0d38253 - WIP got update-surpluses-prices in! (3 weeks ago)
2838a30 - Consolidate update-sap code. (3 weeks ago)
a7d07da - Adding notes for future tests, reference. (3 weeks ago)
3b2bd42 - Correcting consume function to deliver correct output. (3 weeks ago)
87327f9 - Got solution-5 and solution-6 fixed and working! (3 weeks ago)
aa8804e - Solution-5 work: Fixed output, fixing effort. (4 weeks ago)
f9b29a5 - Fixed bug with assign-new-proposal: confirmed solution-4 works (4 weeks ago)
6dfb10d - Get rid of #NaN errors by feeding in right values. (4 weeks ago)
52486ea - Got effort in solution-3 fixed! (4 weeks ago)
23fd8b7 - Fixing ps (prices) and general debugging. (4 weeks ago)
eaf4317 - Adding all subroutines (ripe for refactoring) (4 weeks ago)

I haven't kept up with my diary, but in effect this commit list _is_ my diary of sorts.  
Let my work be my diary.  Get this shit done; we've got a world to transform.

To summarize: I've got the backend infrastructure for Pequod entirely rewritten in Clojurescript.
Just yesterday, in a bout of furious work, I built a testing infrastructure using Doo for
pequod-cljs.  There's an ulterior motive for doing so, besides that I need to be better at TDD.
The iteration logic doesn't work.  I thought that, if I got it all built and tested for a single
iteration, the remaining iterations would fall into place.  They don't; the numbers are askew
after a single iteration.  I need to figure this out, but before I do so I need to make sure
that the code work I've done so far doesn't go off the rails.  It's now gotten to a point
where there's too much to keep track of, hence the need to bring in automated tests.  Here's hoping
I can crack this problem.
